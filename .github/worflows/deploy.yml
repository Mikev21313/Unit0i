name: Deploy Storyline Editor to GitHub 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Create package.json
      run: |
        cat > package.json << 'EOF'
        {
          "name": "storyline-editor",
          "version": "1.0.0",
          "private": true,
          "type": "module",
          "scripts": {
            "dev": "vite",
            "build": "vite build",
            "preview": "vite preview",
            "lint": "eslint src --ext .js,.jsx,.ts,.tsx",
            "type-check": "tsc --noEmit"
          },
          "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "lucide-react": "^0.263.1"
          },
          "devDependencies": {
            "@types/react": "^18.2.15",
            "@types/react-dom": "^18.2.7",
            "@typescript-eslint/eslint-plugin": "^6.0.0",
            "@typescript-eslint/parser": "^6.0.0",
            "@vitejs/plugin-react": "^4.0.3",
            "autoprefixer": "^10.4.14",
            "eslint": "^8.45.0",
            "eslint-plugin-react-hooks": "^4.6.0",
            "eslint-plugin-react-refresh": "^0.4.3",
            "postcss": "^8.4.24",
            "tailwindcss": "^3.3.0",
            "typescript": "^5.0.2",
            "vite": "^4.4.5"
          }
        }
        EOF
    
    - name: Create Vite config
      run: |
        cat > vite.config.ts << 'EOF'
        import { defineConfig } from 'vite'
        import react from '@vitejs/plugin-react'
        
        export default defineConfig({
          plugins: [react()],
          base: '/storyline-editor/',
          build: {
            outDir: 'dist',
            assetsDir: 'assets'
          }
        })
        EOF
    
    - name: Create TypeScript config
      run: |
        cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "useDefineForClassFields": true,
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "module": "ESNext",
            "skipLibCheck": true,
            "moduleResolution": "bundler",
            "allowImportingTsExtensions": true,
            "resolveJsonModule": true,
            "isolatedModules": true,
            "noEmit": true,
            "jsx": "react-jsx",
            "strict": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true,
            "noFallthroughCasesInSwitch": true
          },
          "include": ["src"],
          "references": [{ "path": "./tsconfig.node.json" }]
        }
        EOF
    
    - name: Create TypeScript Node config
      run: |
        cat > tsconfig.node.json << 'EOF'
        {
          "compilerOptions": {
            "composite": true,
            "skipLibCheck": true,
            "module": "ESNext",
            "moduleResolution": "bundler",
            "allowSyntheticDefaultImports": true
          },
          "include": ["vite.config.ts"]
        }
        EOF
    
    - name: Create Tailwind config
      run: |
        cat > tailwind.config.js << 'EOF'
        /** @type {import('tailwindcss').Config} */
        export default {
          content: [
            "./index.html",
            "./src/**/*.{js,ts,jsx,tsx}",
          ],
          theme: {
            extend: {},
          },
          plugins: [],
        }
        EOF
    
    - name: Create PostCSS config
      run: |
        cat > postcss.config.js << 'EOF'
        export default {
          plugins: {
            tailwindcss: {},
            autoprefixer: {},
          },
        }
        EOF
    
    - name: Create source directory structure
      run: |
        mkdir -p src
        cat > src/index.css << 'EOF'
        @tailwind base;
        @tailwind components;
        @tailwind utilities;
        
        body {
          margin: 0;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
            sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }
        EOF
    
    - name: Create main component
      run: |
        cat > src/App.tsx << 'EOF'
        import React, { useState, useRef, useCallback } from 'react';
        import { Play, Pause, SkipBack, SkipForward, Plus, Trash2, Upload, Download, Eye, Settings, Type, Image, Square, Circle } from 'lucide-react';
        
        const StorylineEditor = () => {
          const [slides, setSlides] = useState([
            { id: 1, title: 'Welcome', content: 'Welcome to your presentation', background: '#ffffff', elements: [] }
          ]);
          const [currentSlide, setCurrentSlide] = useState(0);
          const [isPlaying, setIsPlaying] = useState(false);
          const [selectedElement, setSelectedElement] = useState(null);
          const [draggedElement, setDraggedElement] = useState(null);
          const canvasRef = useRef(null);
        
          const addSlide = () => {
            const newSlide = {
              id: slides.length + 1,
              title: `Slide ${slides.length + 1}`,
              content: '',
              background: '#ffffff',
              elements: []
            };
            setSlides([...slides, newSlide]);
          };
        
          const deleteSlide = (index: number) => {
            if (slides.length > 1) {
              const newSlides = slides.filter((_, i) => i !== index);
              setSlides(newSlides);
              if (currentSlide >= newSlides.length) {
                setCurrentSlide(newSlides.length - 1);
              }
            }
          };
        
          const addElement = (type: string) => {
            const newElement = {
              id: Date.now(),
              type,
              x: 100,
              y: 100,
              width: type === 'text' ? 200 : 150,
              height: type === 'text' ? 50 : 100,
              content: type === 'text' ? 'New Text' : '',
              style: {
                backgroundColor: type === 'rectangle' ? '#3b82f6' : type === 'circle' ? '#ef4444' : 'transparent',
                color: type === 'text' ? '#000000' : '#ffffff',
                fontSize: type === 'text' ? '16px' : undefined,
                borderRadius: type === 'circle' ? '50%' : '4px'
              }
            };
        
            const updatedSlides = slides.map((slide, index) => 
              index === currentSlide 
                ? { ...slide, elements: [...slide.elements, newElement] }
                : slide
            );
            setSlides(updatedSlides);
          };
        
          const updateElement = (elementId: number, updates: any) => {
            const updatedSlides = slides.map((slide, index) => 
              index === currentSlide 
                ? {
                    ...slide,
                    elements: slide.elements.map((el: any) => 
                      el.id === elementId ? { ...el, ...updates } : el
                    )
                  }
                : slide
            );
            setSlides(updatedSlides);
          };
        
          const deleteElement = (elementId: number) => {
            const updatedSlides = slides.map((slide, index) => 
              index === currentSlide 
                ? {
                    ...slide,
                    elements: slide.elements.filter((el: any) => el.id !== elementId)
                  }
                : slide
            );
            setSlides(updatedSlides);
            setSelectedElement(null);
          };
        
          const handleElementMouseDown = (e: React.MouseEvent, element: any) => {
            e.preventDefault();
            setSelectedElement(element.id);
            setDraggedElement(element.id);
          };
        
          const handleCanvasMouseMove = (e: React.MouseEvent) => {
            if (draggedElement && canvasRef.current) {
              const rect = (canvasRef.current as HTMLElement).getBoundingClientRect();
              const x = e.clientX - rect.left;
              const y = e.clientY - rect.top;
              
              updateElement(draggedElement, { x: x - 75, y: y - 25 });
            }
          };
        
          const handleCanvasMouseUp = () => {
            setDraggedElement(null);
          };
        
          const exportPresentation = () => {
            const dataStr = JSON.stringify(slides, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            
            const exportFileDefaultName = 'storyline-presentation.json';
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
          };
        
          const nextSlide = () => {
            if (currentSlide < slides.length - 1) {
              setCurrentSlide(currentSlide + 1);
            }
          };
        
          const prevSlide = () => {
            if (currentSlide > 0) {
              setCurrentSlide(currentSlide - 1);
            }
          };
        
          const togglePlayback = () => {
            setIsPlaying(!isPlaying);
          };
        
          return (
            <div className="h-screen bg-gray-900 text-white flex">
              {/* Sidebar */}
              <div className="w-64 bg-gray-800 border-r border-gray-700 flex flex-col">
                {/* Toolbar */}
                <div className="p-4 border-b border-gray-700">
                  <h1 className="text-xl font-bold mb-4">Storyline Editor</h1>
                  <div className="flex gap-2 mb-4">
                    <button
                      onClick={togglePlayback}
                      className="p-2 bg-blue-600 hover:bg-blue-700 rounded"
                    >
                      {isPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                    </button>
                    <button
                      onClick={prevSlide}
                      className="p-2 bg-gray-600 hover:bg-gray-700 rounded"
                    >
                      <SkipBack className="w-4 h-4" />
                    </button>
                    <button
                      onClick={nextSlide}
                      className="p-2 bg-gray-600 hover:bg-gray-700 rounded"
                    >
                      <SkipForward className="w-4 h-4" />
                    </button>
                  </div>
                  
                  {/* Element Tools */}
                  <div className="space-y-2">
                    <h3 className="text-sm font-semibold">Add Elements</h3>
                    <div className="grid grid-cols-2 gap-1">
                      <button
                        onClick={() => addElement('text')}
                        className="p-2 bg-gray-600 hover:bg-gray-700 rounded text-xs flex items-center gap-1"
                      >
                        <Type className="w-3 h-3" />
                        Text
                      </button>
                      <button
                        onClick={() => addElement('image')}
                        className="p-2 bg-gray-600 hover:bg-gray-700 rounded text-xs flex items-center gap-1"
                      >
                        <Image className="w-3 h-3" />
                        Image
                      </button>
                      <button
                        onClick={() => addElement('rectangle')}
                        className="p-2 bg-gray-600 hover:bg-gray-700 rounded text-xs flex items-center gap-1"
                      >
                        <Square className="w-3 h-3" />
                        Box
                      </button>
                      <button
                        onClick={() => addElement('circle')}
                        className="p-2 bg-gray-600 hover:bg-gray-700 rounded text-xs flex items-center gap-1"
                      >
                        <Circle className="w-3 h-3" />
                        Circle
                      </button>
                    </div>
                  </div>
                </div>
        
                {/* Slide List */}
                <div className="flex-1 overflow-y-auto">
                  <div className="p-4">
                    <div className="flex justify-between items-center mb-2">
                      <h3 className="text-sm font-semibold">Slides</h3>
                      <button
                        onClick={addSlide}
                        className="p-1 bg-green-600 hover:bg-green-700 rounded"
                      >
                        <Plus className="w-3 h-3" />
                      </button>
                    </div>
                    <div className="space-y-2">
                      {slides.map((slide, index) => (
                        <div
                          key={slide.id}
                          className={`p-3 rounded cursor-pointer border-2 transition-colors ${
                            currentSlide === index 
                              ? 'border-blue-500 bg-blue-900/30' 
                              : 'border-gray-600 hover:border-gray-500'
                          }`}
                          onClick={() => setCurrentSlide(index)}
                        >
                          <div className="flex justify-between items-start">
                            <div>
                              <div className="text-sm font-medium">{slide.title}</div>
                              <div className="text-xs text-gray-400 mt-1">
                                {slide.elements.length} elements
                              </div>
                            </div>
                            {slides.length > 1 && (
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  deleteSlide(index);
                                }}
                                className="p-1 text-red-400 hover:text-red-300"
                              >
                                <Trash2 className="w-3 h-3" />
                              </button>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
        
                {/* Export */}
                <div className="p-4 border-t border-gray-700">
                  <button
                    onClick={exportPresentation}
                    className="w-full p-2 bg-purple-600 hover:bg-purple-700 rounded flex items-center justify-center gap-2"
                  >
                    <Download className="w-4 h-4" />
                    Export
                  </button>
                </div>
              </div>
        
              {/* Main Canvas */}
              <div className="flex-1 flex flex-col">
                {/* Canvas Header */}
                <div className="bg-gray-800 border-b border-gray-700 p-4 flex justify-between items-center">
                  <div>
                    <h2 className="text-lg font-semibold">{slides[currentSlide]?.title}</h2>
                    <div className="text-sm text-gray-400">
                      Slide {currentSlide + 1} of {slides.length}
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <button className="p-2 bg-gray-600 hover:bg-gray-700 rounded">
                      <Eye className="w-4 h-4" />
                    </button>
                    <button className="p-2 bg-gray-600 hover:bg-gray-700 rounded">
                      <Settings className="w-4 h-4" />
                    </button>
                  </div>
                </div>
        
                {/* Canvas Area */}
                <div className="flex-1 bg-gray-700 p-8 overflow-auto">
                  <div 
                    ref={canvasRef}
                    className="relative bg-white rounded-lg shadow-lg mx-auto"
                    style={{ 
                      width: '800px', 
                      height: '600px',
                      backgroundColor: slides[currentSlide]?.background || '#ffffff'
                    }}
                    onMouseMove={handleCanvasMouseMove}
                    onMouseUp={handleCanvasMouseUp}
                    onMouseLeave={handleCanvasMouseUp}
                  >
                    {/* Slide Elements */}
                    {slides[currentSlide]?.elements.map((element: any) => (
                      <div
                        key={element.id}
                        className={`absolute cursor-move border-2 transition-colors ${
                          selectedElement === element.id 
                            ? 'border-blue-500' 
                            : 'border-transparent hover:border-gray-300'
                        }`}
                        style={{
                          left: element.x,
                          top: element.y,
                          width: element.width,
                          height: element.height,
                          ...element.style
                        }}
                        onMouseDown={(e) => handleElementMouseDown(e, element)}
                        onClick={() => setSelectedElement(element.id)}
                      >
                        {element.type === 'text' && (
                          <div 
                            contentEditable
                            className="w-full h-full p-2 outline-none"
                            style={{ color: element.style.color, fontSize: element.style.fontSize }}
                            onBlur={(e) => updateElement(element.id, { content: e.target.textContent })}
                            suppressContentEditableWarning={true}
                          >
                            {element.content}
                          </div>
                        )}
                        {element.type === 'image' && (
                          <div className="w-full h-full bg-gray-200 flex items-center justify-center text-gray-500 text-sm">
                            Image Placeholder
                          </div>
                        )}
                        {(element.type === 'rectangle' || element.type === 'circle') && (
                          <div className="w-full h-full"></div>
                        )}
                        
                        {/* Delete button for selected element */}
                        {selectedElement === element.id && (
                          <button
                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600"
                            onClick={(e) => {
                              e.stopPropagation();
                              deleteElement(element.id);
                            }}
                          >
                            ×
                          </button>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          );
        };
        
        export default StorylineEditor;
        EOF
    
    - name: Create main entry point
      run: |
        cat > src/main.tsx << 'EOF'
        import React from 'react'
        import ReactDOM from 'react-dom/client'
        import App from './App'
        import './index.css'
        
        ReactDOM.createRoot(document.getElementById('root')!).render(
          <React.StrictMode>
            <App />
          </React.StrictMode>,
        )
        EOF
    
    - name: Create HTML template
      run: |
        cat > index.html << 'EOF'
        <!doctype html>
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <link rel="icon" type="image/svg+xml" href="/vite.svg" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Storyline Editor - Articulate 360 Alternative</title>
            <meta name="description" content="Lightweight presentation editor similar to Articulate 360 Storyline" />
          </head>
          <body>
            <div id="root"></div>
            <script type="module" src="/src/main.tsx"></script>
          </body>
        </html>
        EOF
    
    - name: Create README
      run: |
        cat > README.md << 'EOF'
        # Storyline Editor
        
        A lightweight presentation editor similar to Articulate 360 Storyline, without the learning assessment features.
        
        ## Features
        
        - Slide-based presentation interface
        - Drag-and-drop element editing
        - Multiple element types (text, images, shapes)
        - Real-time preview
        - Export functionality
        - Responsive design
        
        ## Development
        
        ```bash
        npm install
        npm run dev
        ```
        
        ## Build
        
        ```bash
        npm run build
        ```
        
        ## Deploy
        
        This project is automatically deployed to GitHub Pages via GitHub Actions.
        EOF
    
    - name: Install dependencies
      run: npm install
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4