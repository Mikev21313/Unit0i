name: "E-Learning Tool - Optimized Build & Deploy"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: "20"

jobs:
  build:
    name: "Build React Applications"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [editor, player]
        include:
          - app: editor
            port: 3000
          - app: player
            port: 3001
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js with caching"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ matrix.app }}/package-lock.json'

      - name: "Create React application"
        run: |
          # Create the app directory
          mkdir -p ${{ matrix.app }}
          cd ${{ matrix.app }}
          
          # Initialize React app with TypeScript
          npx create-react-app@latest . --template typescript --use-npm
          
          # Install additional dependencies
          npm install react-router-dom @types/react-router-dom

      - name: "Generate application code"
        run: |
          cd ${{ matrix.app }}
          
          # Generate App.tsx based on matrix app type
          if [ "${{ matrix.app }}" = "editor" ]; then
            cat > src/App.tsx << 'EOF'
          import React, { useState, useRef } from 'react';
          import { BrowserRouter as Router, Routes, Route, useNavigate, useParams } from 'react-router-dom';
          import './App.css';

          const SimpleCanvas: React.FC<{ 
            elements: any[], 
            onElementClick: (id: string) => void,
            onCanvasClick: (x: number, y: number) => void,
            selectedTool: string 
          }> = ({ elements, onElementClick, onCanvasClick, selectedTool }) => {
            const canvasRef = useRef<HTMLDivElement>(null);

            const handleCanvasClick = (e: React.MouseEvent) => {
              if (selectedTool === 'text' && canvasRef.current) {
                const rect = canvasRef.current.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                onCanvasClick(x, y);
              }
            };

            return (
              <div 
                ref={canvasRef}
                className="canvas-area"
                onClick={handleCanvasClick}
                style={{
                  width: '800px',
                  height: '600px',
                  backgroundColor: '#f8f9fa',
                  border: '2px solid #dee2e6',
                  borderRadius: '8px',
                  position: 'relative',
                  margin: '20px auto',
                  cursor: selectedTool === 'text' ? 'crosshair' : 'default'
                }}
              >
                {elements.map((element) => (
                  <div
                    key={element.id}
                    className={`canvas-element ${element.selected ? 'selected' : ''}`}
                    style={{
                      position: 'absolute',
                      left: `${element.x}px`,
                      top: `${element.y}px`,
                      padding: '8px',
                      backgroundColor: element.selected ? '#e3f2fd' : '#ffffff',
                      border: element.selected ? '2px solid #2196f3' : '1px solid #ccc',
                      borderRadius: '4px',
                      cursor: 'pointer',
                      userSelect: 'none',
                      minWidth: '100px',
                      minHeight: '30px'
                    }}
                    onClick={(e) => {
                      e.stopPropagation();
                      onElementClick(element.id);
                    }}
                  >
                    {element.content || 'Text Element'}
                  </div>
                ))}
                
                {elements.length === 0 && (
                  <div style={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                    textAlign: 'center',
                    color: '#6c757d',
                    fontSize: '18px'
                  }}>
                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>üé®</div>
                    <div>Select "Text" tool and click to add content</div>
                  </div>
                )}
              </div>
            );
          };

          const ProjectDashboard: React.FC = () => {
            const navigate = useNavigate();
            const [projects] = useState([
              {
                id: '1',
                title: 'Sample E-Learning Course',
                description: 'Introduction to interactive learning',
                lastEdited: new Date().toLocaleDateString(),
                slides: 3
              }
            ]);

            return (
              <div className="dashboard">
                <div className="dashboard-header">
                  <div>
                    <h1>üéì E-Learning Studio</h1>
                    <p>Create engaging interactive courses</p>
                  </div>
                  <button onClick={() => navigate('/editor/1')} className="btn-primary">
                    ‚ûï Start Editing
                  </button>
                </div>
                
                <div className="projects-grid">
                  {projects.map((project) => (
                    <div
                      key={project.id}
                      className="project-card"
                      onClick={() => navigate(`/editor/${project.id}`)}
                    >
                      <div className="project-preview">üìö</div>
                      <h3>{project.title}</h3>
                      <p>{project.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            );
          };

          const CourseEditor: React.FC = () => {
            const { projectId } = useParams();
            const navigate = useNavigate();
            const [selectedTool, setSelectedTool] = useState('select');
            const [elements, setElements] = useState<any[]>([]);
            const [elementCounter, setElementCounter] = useState(1);

            const addTextElement = (x: number, y: number) => {
              const newElement = {
                id: `element-${elementCounter}`,
                type: 'text',
                content: `Text ${elementCounter}`,
                x: Math.max(10, x - 50),
                y: Math.max(10, y - 15),
                selected: false
              };
              setElements([...elements, newElement]);
              setElementCounter(elementCounter + 1);
            };

            const selectElement = (id: string) => {
              setElements(elements.map(el => ({
                ...el,
                selected: el.id === id
              })));
            };

            return (
              <div className="editor">
                <div className="editor-toolbar">
                  <button onClick={() => navigate('/')} className="btn-back">
                    ‚Üê Dashboard
                  </button>
                  <h1>Course Editor - Project {projectId}</h1>
                  
                  <div className="toolbar-center">
                    <button
                      onClick={() => setSelectedTool('select')}
                      className={`tool-btn ${selectedTool === 'select' ? 'active' : ''}`}
                    >
                      üëÜ Select
                    </button>
                    <button
                      onClick={() => setSelectedTool('text')}
                      className={`tool-btn ${selectedTool === 'text' ? 'active' : ''}`}
                    >
                      üìù Text
                    </button>
                  </div>
                </div>

                <div className="editor-content">
                  <SimpleCanvas 
                    elements={elements}
                    onElementClick={selectElement}
                    onCanvasClick={addTextElement}
                    selectedTool={selectedTool}
                  />
                </div>
              </div>
            );
          };

          const App: React.FC = () => {
            return (
              <Router>
                <div className="App">
                  <Routes>
                    <Route path="/" element={<ProjectDashboard />} />
                    <Route path="/editor/:projectId" element={<CourseEditor />} />
                  </Routes>
                </div>
              </Router>
            );
          };

          export default App;
          EOF
          else
            cat > src/App.tsx << 'EOF'
          import React, { useState } from 'react';
          import './App.css';

          const courseData = {
            title: "Interactive E-Learning Course",
            description: "A comprehensive learning experience",
            slides: [
              { id: "1", title: "Welcome", content: "üéì Welcome to this interactive course!", icon: "üéì" },
              { id: "2", title: "Learning Objectives", content: "üìö Master key concepts through engaging content.", icon: "üìö" },
              { id: "3", title: "Interactive Features", content: "üéØ Includes quizzes and hands-on exercises.", icon: "üéØ" },
              { id: "4", title: "Conclusion", content: "üéâ Congratulations on completing the course!", icon: "üéâ" }
            ]
          };

          const App: React.FC = () => {
            const [courseStarted, setCourseStarted] = useState(false);
            const [currentSlide, setCurrentSlide] = useState(0);

            if (!courseStarted) {
              return (
                <div className="start-screen">
                  <div className="start-content">
                    <div className="start-icon">üéì</div>
                    <h1>{courseData.title}</h1>
                    <p>{courseData.description}</p>
                    <button onClick={() => setCourseStarted(true)} className="btn-primary">
                      ‚ñ∂Ô∏è Start Course
                    </button>
                  </div>
                </div>
              );
            }

            const currentSlideData = courseData.slides[currentSlide];
            const progress = ((currentSlide + 1) / courseData.slides.length) * 100;

            return (
              <div className="player">
                <div className="player-header">
                  <h1>{courseData.title}</h1>
                  <div className="progress-bar">
                    <div className="progress-fill" style={{ width: `${progress}%` }} />
                  </div>
                </div>

                <div className="slide-container">
                  <div className="slide">
                    <div className="slide-icon">{currentSlideData.icon}</div>
                    <h2>{currentSlideData.title}</h2>
                    <p>{currentSlideData.content}</p>
                  </div>
                </div>

                <div className="player-controls">
                  <button
                    onClick={() => setCurrentSlide(Math.max(0, currentSlide - 1))}
                    disabled={currentSlide === 0}
                    className="btn-control"
                  >
                    ‚Üê Previous
                  </button>
                  
                  <span>
                    {currentSlide + 1} of {courseData.slides.length}
                  </span>

                  <button
                    onClick={() => {
                      if (currentSlide === courseData.slides.length - 1) {
                        setCourseStarted(false);
                        setCurrentSlide(0);
                      } else {
                        setCurrentSlide(currentSlide + 1);
                      }
                    }}
                    className="btn-control primary"
                  >
                    {currentSlide === courseData.slides.length - 1 ? 'Restart' : 'Next ‚Üí'}
                  </button>
                </div>
              </div>
            );
          };

          export default App;
          EOF
          fi

      - name: "Generate CSS styles"
        run: |
          cd ${{ matrix.app }}
          
          cat > src/App.css << 'EOF'
          * { box-sizing: border-box; margin: 0; padding: 0; }
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; }

          /* Common styles */
          .btn-primary {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s ease;
          }
          .btn-primary:hover { background: #0056b3; transform: translateY(-2px); }

          .btn-control {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 12px 20px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
          }
          .btn-control:hover:not(:disabled) { background: #545b62; }
          .btn-control:disabled { background: #dee2e6; color: #6c757d; cursor: not-allowed; }
          .btn-control.primary { background: #28a745; }
          .btn-control.primary:hover { background: #1e7e34; }

          .btn-back {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.2s ease;
          }
          .btn-back:hover { background: #545b62; }

          /* Dashboard styles */
          .dashboard {
            padding: 32px;
            max-width: 1200px;
            margin: 0 auto;
            min-height: 100vh;
            background: #f8f9fa;
          }

          .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 32px;
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          }

          .dashboard-header h1 {
            margin: 0;
            font-size: 2.5rem;
            color: #2c3e50;
            font-weight: 700;
          }

          .dashboard-header p {
            margin: 8px 0 0 0;
            color: #7f8c8d;
            font-size: 1.1rem;
          }

          .projects-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 24px;
          }

          .project-card {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
          }

          .project-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 24px rgba(0,0,0,0.15);
          }

          .project-preview {
            font-size: 4rem;
            margin-bottom: 16px;
          }

          .project-card h3 {
            margin: 0 0 8px 0;
            font-size: 1.3rem;
            color: #2c3e50;
          }

          /* Editor styles */
          .editor {
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: #f8f9fa;
          }

          .editor-toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 24px;
            background: white;
            border-bottom: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }

          .editor-toolbar h1 {
            margin: 0;
            font-size: 1.4rem;
            color: #2c3e50;
            font-weight: 600;
          }

          .toolbar-center {
            display: flex;
            gap: 8px;
            background: #f8f9fa;
            padding: 8px;
            border-radius: 8px;
          }

          .tool-btn {
            padding: 12px 16px;
            border: none;
            border-radius: 6px;
            background: transparent;
            color: #6c757d;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            font-weight: 500;
          }

          .tool-btn:hover { background: #e9ecef; color: #495057; }
          .tool-btn.active {
            background: #007bff;
            color: white;
            box-shadow: 0 2px 4px rgba(0,123,255,0.3);
          }

          .editor-content {
            flex: 1;
            padding: 24px;
            overflow: auto;
            display: flex;
            justify-content: center;
            align-items: center;
          }

          .canvas-area {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
          }

          .canvas-element {
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
          }

          .canvas-element:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
          }

          .canvas-element.selected {
            box-shadow: 0 0 0 2px #2196f3;
          }

          /* Player styles */
          .start-screen {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 32px;
          }

          .start-content {
            background: white;
            border-radius: 16px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.2);
            padding: 48px 40px;
            max-width: 500px;
            text-align: center;
          }

          .start-icon {
            font-size: 5rem;
            margin-bottom: 24px;
          }

          .start-content h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 16px;
            color: #2c3e50;
          }

          .start-content p {
            font-size: 1.2rem;
            color: #6c757d;
            margin-bottom: 32px;
            line-height: 1.6;
          }

          .player {
            min-height: 100vh;
            background: #f8f9fa;
            display: flex;
            flex-direction: column;
          }

          .player-header {
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            padding: 20px 32px;
          }

          .player-header h1 {
            font-size: 1.6rem;
            font-weight: 600;
            margin: 0 0 12px 0;
            color: #2c3e50;
          }

          .progress-bar {
            background: #e9ecef;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
          }

          .progress-fill {
            background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
            height: 100%;
            transition: width 0.3s ease;
          }

          .slide-container {
            flex: 1;
            padding: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
          }

          .slide {
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 600px;
            min-height: 400px;
            padding: 48px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: center;
          }

          .slide-icon {
            font-size: 4rem;
            margin-bottom: 24px;
          }

          .slide h2 {
            font-size: 2rem;
            font-weight: 600;
            color: #2c3e50;
            margin: 0 0 24px 0;
          }

          .slide p {
            font-size: 1.3rem;
            line-height: 1.6;
            color: #495057;
          }

          .player-controls {
            background: white;
            border-top: 1px solid #e9ecef;
            padding: 20px 32px;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }

          /* Responsive design */
          @media (max-width: 768px) {
            .dashboard { padding: 16px; }
            .dashboard-header { flex-direction: column; text-align: center; gap: 16px; }
            .projects-grid { grid-template-columns: 1fr; }
            .editor-toolbar { flex-direction: column; gap: 12px; }
            .start-content { padding: 32px 24px; margin: 16px; }
            .slide-container { padding: 20px; }
            .slide { padding: 32px 24px; }
            .player-controls { flex-direction: column; gap: 16px; }
          }
          EOF

      - name: "Update package.json for deployment"
        run: |
          cd ${{ matrix.app }}
          
          # Set homepage for GitHub Pages subdirectory deployment
          npm pkg set homepage="/Unit0i/${{ matrix.app }}"

      - name: "Build application"
        run: |
          cd ${{ matrix.app }}
          npm run build
        env:
          CI: true
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: ${{ matrix.app }}/build/
          compression-level: 9
          retention-days: 1

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: "Download all artifacts"
        uses: actions/download-artifact@v4
        
      - name: "Prepare deployment structure"
        run: |
          mkdir -p dist
          mv editor-build dist/editor
          mv player-build dist/player
          
          # Create root navigation page
          cat > dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>E-Learning Authoring Tool</title>
            <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 2rem;
              }
              .container {
                background: white;
                border-radius: 16px;
                box-shadow: 0 25px 50px rgba(0,0,0,0.2);
                padding: 3rem;
                max-width: 600px;
                text-align: center;
              }
              h1 {
                font-size: 2.5rem;
                color: #2c3e50;
                margin-bottom: 1rem;
                font-weight: 700;
              }
              p {
                font-size: 1.2rem;
                color: #6c757d;
                margin-bottom: 2.5rem;
                line-height: 1.6;
              }
              .apps {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1.5rem;
                margin-bottom: 2rem;
              }
              .app-card {
                background: #f8f9fa;
                border-radius: 12px;
                padding: 2rem 1.5rem;
                text-decoration: none;
                color: inherit;
                transition: all 0.3s ease;
                border: 2px solid transparent;
              }
              .app-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                border-color: #007bff;
              }
              .app-icon {
                font-size: 3rem;
                margin-bottom: 1rem;
              }
              .app-title {
                font-size: 1.3rem;
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 0.5rem;
              }
              .app-desc {
                font-size: 0.95rem;
                color: #6c757d;
                line-height: 1.4;
              }
              .footer {
                font-size: 0.9rem;
                color: #95a5a6;
                margin-top: 1.5rem;
              }
              @media (max-width: 640px) {
                .container { padding: 2rem; margin: 1rem; }
                h1 { font-size: 2rem; }
                .apps { grid-template-columns: 1fr; }
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>üéì E-Learning Authoring Tool</h1>
              <p>Create and deliver engaging interactive learning experiences</p>
              
              <div class="apps">
                <a href="./editor/" class="app-card">
                  <div class="app-icon">üé®</div>
                  <div class="app-title">Course Editor</div>
                  <div class="app-desc">Design and build interactive learning content</div>
                </a>
                
                <a href="./player/" class="app-card">
                  <div class="app-icon">üé¨</div>
                  <div class="app-title">Course Player</div>
                  <div class="app-desc">Experience and preview completed courses</div>
                </a>
              </div>
              
              <div class="footer">
                Built with React ‚Ä¢ Powered by GitHub Actions
              </div>
            </div>
          </body>
          </html>
          EOF

      - name: "Setup Pages"
        uses: actions/configure-pages@v4

      - name: "Upload to Pages"
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: "Deploy to GitHub Pages"
        id: deployment
        uses: actions/deploy-pages@v4