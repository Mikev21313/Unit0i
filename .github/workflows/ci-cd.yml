# ðŸ”§ CRITICAL BUILD FIXES

# Fix 1: TypeScript Configuration (esModuleInterop Error)
# File: tsconfig.json (ROOT)
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "jsx": "react-jsx",
    "strict": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "allowJs": true,
    "noEmit": true,
    "isolatedModules": true,
    "moduleResolution": "node",
    "types": ["react", "react-dom", "node", "vitest/globals"]
  },
  "exclude": ["node_modules", "dist", "build", "coverage"]
}

---

# Fix 2: Editor App TypeScript Config
# File: apps/editor/tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "ESNext",
    "target": "ESNext",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "types": ["react", "react-dom", "node"],
    "paths": {
      "@/*": ["./src/*"],
      "@elearning/core": ["../../packages/core/src"],
      "@elearning/ui": ["../../packages/ui/src"],
      "@elearning/interactions": ["../../packages/interactions/src"]
    }
  },
  "include": ["src", "vite.config.ts"]
}

---

# Fix 3: Player App TypeScript Config  
# File: apps/player/tsconfig.json
{
  "extends": "../../tsconfig.json", 
  "compilerOptions": {
    "jsx": "react-jsx",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "ESNext",
    "target": "ESNext", 
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "types": ["react", "react-dom", "node"],
    "paths": {
      "@/*": ["./src/*"],
      "@elearning/core": ["../../packages/core/src"],
      "@elearning/interactions": ["../../packages/interactions/src"]
    }
  },
  "include": ["src", "vite.config.ts"]
}

---

# Fix 4: Corrected Test Setup
# File: tests/setup.ts
import '@testing-library/jest-dom';
import { expect, afterEach, vi } from 'vitest';
import { cleanup } from '@testing-library/react';

// Fix the IntersectionObserver mock with proper typing
global.IntersectionObserver = vi.fn().mockImplementation(() => ({
  disconnect: vi.fn(),
  observe: vi.fn(),
  unobserve: vi.fn(),
}));

// Fix the ResizeObserver mock with proper typing  
global.ResizeObserver = vi.fn().mockImplementation(() => ({
  disconnect: vi.fn(),
  observe: vi.fn(), 
  unobserve: vi.fn(),
}));

afterEach(() => {
  cleanup();
});

---

# Fix 5: Fixed Vite Config for Editor
# File: apps/editor/vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      // Point to source files instead of dist during development
      '@elearning/core': path.resolve(__dirname, '../../packages/core/src'),
      '@elearning/ui': path.resolve(__dirname, '../../packages/ui/src'),
      '@elearning/interactions': path.resolve(__dirname, '../../packages/interactions/src'),
    },
  },
  server: {
    port: 5173,
    host: true,
  },
  build: {
    outDir: 'dist',
    emptyOutDir: true,
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
        },
      },
    },
  },
  preview: {
    port: 4173,
    host: true,
  },
});

---

# Fix 6: Fixed Vite Config for Player  
# File: apps/player/vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      // Point to source files instead of dist during development
      '@elearning/core': path.resolve(__dirname, '../../packages/core/src'),
      '@elearning/interactions': path.resolve(__dirname, '../../packages/interactions/src'),
    },
  },
  server: {
    port: 5174,
    host: true,
  },
  build: {
    outDir: 'dist',
    emptyOutDir: true,
    sourcemap: true,
  },
  preview: {
    port: 4174,
    host: true,
  },
});

---

# Fix 7: Updated Package.json for Apps (Add Missing Dependencies)
# File: apps/editor/package.json  
{
  "name": "@elearning/editor",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "tsc --noEmit && vite build",
    "preview": "vite preview",
    "test": "vitest",
    "lint": "eslint src --ext .ts,.tsx"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.20.0",
    "zustand": "^4.4.0",
    "immer": "^10.0.0",
    "framer-motion": "^10.16.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@types/node": "^20.10.0",
    "typescript": "^5.3.0",
    "vite": "^5.0.0",
    "@vitejs/plugin-react": "^4.2.0",
    "eslint": "^8.55.0"
  }
}

---

# Fix 8: Updated GitHub Actions Build Step
# Insert this BEFORE the current build steps in the workflow:

- name: "Fix TypeScript configurations"
  run: |
    set -euo pipefail
    
    echo "ðŸ”§ Applying TypeScript configuration fixes..."
    
    # Fix root tsconfig.json
    cat > tsconfig.json << 'EOF'
    {
      "compilerOptions": {
        "target": "ES2020",
        "module": "ESNext", 
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "jsx": "react-jsx",
        "strict": true,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "resolveJsonModule": true,
        "allowJs": true,
        "noEmit": true,
        "isolatedModules": true,
        "moduleResolution": "node",
        "types": ["react", "react-dom", "node"]
      },
      "exclude": ["node_modules", "dist", "build", "coverage"]
    }
    EOF
    
    # Fix editor tsconfig.json
    cat > apps/editor/tsconfig.json << 'EOF'
    {
      "extends": "../../tsconfig.json",
      "compilerOptions": {
        "jsx": "react-jsx",
        "lib": ["DOM", "DOM.Iterable", "ESNext"],
        "module": "ESNext",
        "target": "ESNext",
        "moduleResolution": "bundler", 
        "allowImportingTsExtensions": true,
        "noEmit": true,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "types": ["react", "react-dom", "node"],
        "paths": {
          "@/*": ["./src/*"],
          "@elearning/core": ["../../packages/core/src"],
          "@elearning/ui": ["../../packages/ui/src"],
          "@elearning/interactions": ["../../packages/interactions/src"]
        }
      },
      "include": ["src", "vite.config.ts"]
    }
    EOF
    
    # Fix player tsconfig.json  
    cat > apps/player/tsconfig.json << 'EOF'
    {
      "extends": "../../tsconfig.json",
      "compilerOptions": {
        "jsx": "react-jsx",
        "lib": ["DOM", "DOM.Iterable", "ESNext"],
        "module": "ESNext", 
        "target": "ESNext",
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "noEmit": true,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "types": ["react", "react-dom", "node"],
        "paths": {
          "@/*": ["./src/*"],
          "@elearning/core": ["../../packages/core/src"],
          "@elearning/interactions": ["../../packages/interactions/src"]
        }
      },
      "include": ["src", "vite.config.ts"]
    }
    EOF
    
    # Fix test setup
    cat > tests/setup.ts << 'EOF'
    import '@testing-library/jest-dom';
    import { expect, afterEach, vi } from 'vitest';
    import { cleanup } from '@testing-library/react';

    global.IntersectionObserver = vi.fn().mockImplementation(() => ({
      disconnect: vi.fn(),
      observe: vi.fn(),
      unobserve: vi.fn(),
    }));

    global.ResizeObserver = vi.fn().mockImplementation(() => ({
      disconnect: vi.fn(),
      observe: vi.fn(),
      unobserve: vi.fn(),
    }));

    afterEach(() => {
      cleanup();
    });
    EOF
    
    echo "âœ… TypeScript configurations fixed"

- name: "Fix Vite configurations"
  run: |
    set -euo pipefail
    
    echo "ðŸ”§ Fixing Vite configurations..."
    
    # Fix editor vite config
    cat > apps/editor/vite.config.ts << 'EOF'
    import { defineConfig } from 'vite';
    import react from '@vitejs/plugin-react';
    import path from 'path';

    export default defineConfig({
      plugins: [react()],
      resolve: {
        alias: {
          '@': path.resolve(__dirname, './src'),
          '@elearning/core': path.resolve(__dirname, '../../packages/core/src'),
          '@elearning/ui': path.resolve(__dirname, '../../packages/ui/src'),
          '@elearning/interactions': path.resolve(__dirname, '../../packages/interactions/src'),
        },
      },
      server: {
        port: 5173,
        host: true,
      },
      build: {
        outDir: 'dist',
        emptyOutDir: true,
        sourcemap: true,
        rollupOptions: {
          output: {
            manualChunks: {
              vendor: ['react', 'react-dom'],
            },
          },
        },
      },
      preview: {
        port: 4173,
        host: true,
      },
    });
    EOF
    
    # Fix player vite config
    cat > apps/player/vite.config.ts << 'EOF'
    import { defineConfig } from 'vite';
    import react from '@vitejs/plugin-react';
    import path from 'path';

    export default defineConfig({
      plugins: [react()],
      resolve: {
        alias: {
          '@': path.resolve(__dirname, './src'),
          '@elearning/core': path.resolve(__dirname, '../../packages/core/src'),
          '@elearning/interactions': path.resolve(__dirname, '../../packages/interactions/src'),
        },
      },
      server: {
        port: 5174,
        host: true,
      },
      build: {
        outDir: 'dist',
        emptyOutDir: true,
        sourcemap: true,
      },
      preview: {
        port: 4174,
        host: true,
      },
    });
    EOF
    
    echo "âœ… Vite configurations fixed"

---

# Fix 9: Add React Import Fix to All React Files
# This should be added to apps/editor/src/main.tsx and apps/player/src/main.tsx:

import React from 'react';
import { createRoot } from 'react-dom/client';
// ... rest of imports

const root = createRoot(document.getElementById('root')!);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

---

# Fix 10: Emergency Build Fallback (if above fails)
# Replace the current build steps with:

- name: "Emergency simplified build"
  run: |
    set -euo pipefail
    
    echo "ðŸš¨ Emergency simplified build..."
    
    # Build each app with minimal config
    for app in editor player; do
      echo "Building $app..."
      cd "apps/$app"
      
      # Create ultra-simple vite config
      cat > vite.emergency.config.ts << 'EOF'
    import { defineConfig } from 'vite';
    import react from '@vitejs/plugin-react';
    
    export default defineConfig({
      plugins: [react()],
      build: {
        outDir: 'dist',
        emptyOutDir: true,
      },
    });
    EOF
      
      # Simple build
      npx vite build --config vite.emergency.config.ts || {
        echo "Emergency build failed for $app"
        # Create minimal dist
        mkdir -p dist
        cat > dist/index.html << 'HTML'
    <!DOCTYPE html>
    <html><head><title>E-Learning Tool</title></head>
    <body><h1>Build in progress...</h1></body></html>
    HTML
      }
      
      cd ../../
    done